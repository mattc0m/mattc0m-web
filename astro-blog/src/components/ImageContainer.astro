---
export interface Props {
	title?: string;
	body?: string;
    height?: string;
    width?: string;
    href?: string;
    cssClass?: string;
    textClass?: string;
}

const { title, body, href, cssClass, textClass, height = "200px", width = "580px" } = Astro.props;
---

<!-- <a href={href} class="ImageContainer"> -->
    <a class:list={[ 'ImageContainer', cssClass ]} href={href}>
        <div class:list={[ 'TextBlock hasByline', textClass ]}>
            <span class="title">{title}</span>
            <span class="byline">{body}</span>
        </div>

        <div class="BackgroundContainer isClipped comingSoon">
            <span>Coming Soon</span>
        </div>
        <div class="BackgroundContainer isClipped">
            <div class="SubImage" id="EN-Thumbnail">
                <slot />
            </div>
        </div>
    </a>

<style lang="scss" define:vars={{ height, width }}>
    // Codepen: https://codepen.io/mattc0m/pen/dyQByRE
    // Design Tokens (Variables)
    $ImageContainer-Width: var(--width);
    $ImageContainer-Height: var(--height);
    $ImageContainer-VerticalPadding: 32px;
    $ImageContainer-HorizontalPadding: 32px;
    $ImageContainer-BorderColor: #000;
    $ImageContainer-BorderRadius: 12px;
    $ImageContainer-BoxShadow: none;
    $ImageContainer-Background: #fff;
    $ImageContainer-HasBorder: 1;
    $ImageContainer-BorderWidth: $ImageContainer-HasBorder * 2px;
    $ImageContainer-BorderStyle: solid;
    $ImageContainer-Hover-Background: #fff;
    $ImageContainer-Hover-BorderColor: #000;
    $ImageContainer-Hover-BoxShadow: none;

    $UI-Gap-Small: 8px;
    $TextBlock-Gap: $UI-Gap-Small;

    $TextBlock-Title-FontFamily: Inter;
    $TextBlock-Title-FontSize: 16px;
    $TextBlock-Title-LineHeight: 20px;
    $TextBlock-Title-FontWeight: 500;
    $TextBlock-Title-FontStyle: Normal;
    $TextBlock-Title-Color: #191919;

    $TextBlock-Byline-FontFamily: DM Mono;
    $TextBlock-Byline-FontSize: 12px;
    $TextBlock-Byline-FontWeight: 400;
    $TextBlock-Byline-FontStyle: Normal;
    $TextBlock-Byline-LineHeight: 16px;
    $TextBlock-Byline-Color: rgba(25, 25, 25, 0.60);

    // Variant: basicDark theme (default is basicWhite)
    $basicDark-TextBlock-Title-Color: #ffffff;
    $basicDark-TextBlock-Byline-Color: rgba(255, 255, 255, 0.60);

    // Variant: Large size
    $ImageContainer-Large-Width: 1024px;
    $ImageContainer-Large-Height: 500px;
    $ImageContainer-Large-VerticalPadding: $ImageContainer-VerticalPadding * 2;
    $ImageContainer-Large-HorizontalPadding: $ImageContainer-HorizontalPadding * 2;
    $ImageContainer-Large-BorderWidth: $ImageContainer-BorderWidth;
    $ImageContainer-Large-BorderColor: $ImageContainer-BorderColor;
    $ImageContainer-Large-BorderRadius: $ImageContainer-BorderRadius;
    $ImageContainer-Large-BoxShadow: $ImageContainer-BoxShadow;
    $ImageContainer-Large-Background: $ImageContainer-Background;
    $ImageContainer-Large-HasBorder: $ImageContainer-HasBorder;
    $ImageContainer-Large-BorderStyle: $ImageContainer-BorderStyle;
    $ImageContainer-Large-Hover-Background: $ImageContainer-Hover-Background;
    $ImageContainer-Large-Hover-BorderColor: $ImageContainer-Hover-BorderColor;
    $ImageContainer-Large-Hover-BoxShadow: $ImageContainer-Hover-BoxShadow;

    // Component: ImageContainer
    .ImageContainer {
        box-sizing: border-box;
        position: relative;
        display: flex;
        width: 100%;
        height: 100%;
        max-width: $ImageContainer-Width;
        min-height: $ImageContainer-Height;
        padding: $ImageContainer-VerticalPadding $ImageContainer-HorizontalPadding;
        border-radius: $ImageContainer-BorderRadius;
        box-shadow: $ImageContainer-BoxShadow;
        background: $ImageContainer-Background;
        border: $ImageContainer-BorderWidth $ImageContainer-BorderStyle $ImageContainer-BorderColor;
        margin-top: 24px;
        text-decoration: none;

        &.hover {
            background: $ImageContainer-Hover-Background;
            border-color: $ImageContainer-Hover-BorderColor;
            box-shadow: $ImageContainer-Hover-BoxShadow;
        }
        .BackgroundContainer {
            border-radius: $ImageContainer-BorderRadius - $ImageContainer-BorderWidth; // uses quick maths to solve pixel bleed issue
        }

        // Variant: Large (Size)
        &.sizeLarge {
        width: $ImageContainer-Large-Width;
        height: $ImageContainer-Large-Height;
        padding: $ImageContainer-Large-VerticalPadding $ImageContainer-Large-HorizontalPadding;
        border-radius: $ImageContainer-Large-BorderRadius;
        box-shadow: $ImageContainer-Large-BoxShadow;
        background: $ImageContainer-Large-Background;
        border: $ImageContainer-Large-BorderWidth $ImageContainer-Large-BorderStyle $ImageContainer-Large-BorderColor;
        margin-bottom: $UI-Gap-Small * 2;
        }

        // Variant: onDark (Theme)
        &.themeDark {
            background: none;
        }

        // Variant: isComingSoon
        &.isComingSoon {
            > .comingSoon { display: flex; }
            &:hover {
                .comingSoon {
                    opacity: 1;
                }
            }
        }
    }

    // Sub-Component: BackgroundContainer
    // This is used to control if the background is clipped or not. These are typically stacked (one container with clipping, one without) on top of eachother, so you can have images that are clipped or overlays.
    // TO DOCUMENT VISUALLY
    .BackgroundContainer {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        height: 100%;
        width: 100%;
        &.isClipped {
            overflow: hidden;
        }

        .SubImage {
            position: absolute;
            top: 0; left: 0; right: 0; bottom: 0;
            height: 100%; width: 100%;
            img {
                position: absolute;
                -moz-user-select: none;
                -webkit-user-select: none;
                user-select: none;
                }

            //Position Options
            .FixedTopRight { top: 0; right: 0; }
            .FixedBottomRight { bottom: 0; right: 0; }
            .FixedMidRight { top: 0; bottom: 0; right: 0; }
            .FixedTopLeft { top: 0; left: 0; }
            .FixedBottomLeft { bottom: 0; left: 0; }

            .Scale200px { max-width: 200px; }
            .Scale300px { max-width: 300px; }
            .Scale400px { max-width: 400px; }
            .Scale500px { max-width: 500px; }
            .Scale600px { max-width: 600px; }
            .Scale700px { max-width: 700px; }
        }
    }

    .TextBlock {
        display: flex;
        flex-direction: column;
        gap: $TextBlock-Gap;
        position: relative;
        z-index: 1;

        .title {
            font-family: $TextBlock-Title-FontFamily;
            font-size: $TextBlock-Title-FontSize;
            line-height: $TextBlock-Title-LineHeight;
            font-weight: $TextBlock-Title-FontWeight;
            font-style: $TextBlock-Title-FontStyle;
            color: $TextBlock-Title-Color;
        }
        .byline {
            font-family: $TextBlock-Byline-FontFamily;
            font-size: $TextBlock-Byline-FontSize;
            line-height: $TextBlock-Byline-LineHeight;
            font-weight: $TextBlock-Byline-FontWeight;
            font-style: $TextBlock-Byline-FontStyle;
            color: $TextBlock-Byline-Color;
        }

        &.onDark {
            .title { color: $basicDark-TextBlock-Title-Color; }
            .byline { color: $basicDark-TextBlock-Byline-Color; }
        }
    }
    .comingSoon {
        position: absolute;
        width: 100%;
        height: 100%;
        pointer-events: none;
        -webkit-pointer-events: none;
        opacity: 0;
        z-index: 5;
        background: rgba(0,0,0,0.75);
        top: 0; left: 0;
        color: $basicDark-TextBlock-Title-Color;
        justify-content: center;
        align-items: center;
        transition: background ease-in-out 0.3s, opacity ease-in-out 0.3s;
        display: none;
    }
</style>