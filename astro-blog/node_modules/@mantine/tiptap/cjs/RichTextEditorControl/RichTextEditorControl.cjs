'use client';
'use strict';

var React = require('react');
var core = require('@mantine/core');
var RichTextEditor_context = require('../RichTextEditor.context.cjs');
var RichTextEditor_module = require('../RichTextEditor.module.css.cjs');

const defaultProps = {
  interactive: true
};
const RichTextEditorControl = core.factory((_props, ref) => {
  const props = core.useProps("RichTextEditorControl", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    vars,
    interactive,
    active,
    onMouseDown,
    ...others
  } = props;
  const ctx = RichTextEditor_context.useRichTextEditorContext();
  return /* @__PURE__ */ React.createElement(
    core.UnstyledButton,
    {
      ...others,
      ...ctx.getStyles("control", { className, style, classNames, styles }),
      "data-rich-text-editor-control": true,
      tabIndex: interactive ? 0 : -1,
      "data-interactive": interactive || void 0,
      "data-active": active || void 0,
      "aria-pressed": active && interactive || void 0,
      "aria-hidden": !interactive || void 0,
      ref,
      unstyled: ctx.unstyled,
      onMouseDown: (event) => {
        event.preventDefault();
        onMouseDown?.(event);
      }
    }
  );
});
RichTextEditorControl.classes = RichTextEditor_module;
RichTextEditorControl.displayName = "@mantine/tiptap/RichTextEditorControl";
const RichTextEditorControlBase = React.forwardRef(({ className, icon: Icon, ...others }, ref) => /* @__PURE__ */ React.createElement(RichTextEditorControl, { ref, ...others }, /* @__PURE__ */ React.createElement(Icon, { style: { width: core.rem(16), height: core.rem(16) } })));
RichTextEditorControlBase.displayName = "@mantine/tiptap/RichTextEditorControlBase";
function createControl({ label, isActive, operation, icon }) {
  return React.forwardRef((props, ref) => {
    const { editor, labels } = RichTextEditor_context.useRichTextEditorContext();
    const _label = labels[label];
    return /* @__PURE__ */ React.createElement(
      RichTextEditorControlBase,
      {
        ...props,
        "aria-label": _label,
        title: _label,
        active: isActive?.name ? editor?.isActive(isActive.name, isActive.attributes) : false,
        ref,
        onClick: () => editor?.chain().focus()[operation.name](operation.attributes).run(),
        icon: props.icon || icon
      }
    );
  });
}

exports.RichTextEditorControl = RichTextEditorControl;
exports.RichTextEditorControlBase = RichTextEditorControlBase;
exports.createControl = createControl;
//# sourceMappingURL=RichTextEditorControl.cjs.map
